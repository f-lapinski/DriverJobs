@implements IDisposable
@inject NavigationManager NavigationManager

<MudNavMenu>

    <MudNavLink Href="/" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">
        Home
    </MudNavLink>

    <AuthorizeView>
        <Authorized>
            <MudNavLink Href="Account/Manage" Icon="@Icons.Material.Filled.Person">
                @context.User.Identity?.Name
            </MudNavLink>
            <MudNavLink>
                <form action="Account/Logout" method="post" style="margin:0; padding:0;">
                    <AntiforgeryToken />
                    <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Text" Color="Color.Inherit" Style="text-transform:none; padding:0;">
                        <MudIcon Icon="@Icons.Material.Filled.Login" /> Logout
                    </MudButton>
                </form>
            </MudNavLink>
        </Authorized>
        <NotAuthorized>
            <MudNavLink Href="Account/Register" Icon="@Icons.Material.Filled.PersonAdd">
                Register
            </MudNavLink>
            <MudNavLink Href="Account/Login" Icon="@Icons.Material.Filled.Login">
                Login
            </MudNavLink>
        </NotAuthorized>
    </AuthorizeView>

</MudNavMenu>

@code {
    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}